<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Welcome</title>
  <style>
    body {
      background: black;
      color: white;
      font-family: 'Courier New', monospace; /* <-- Custom font can be injected here */
      margin: 0;
      padding: 2em;
      display: flex;
      flex-direction: column;
      align-items: center;
      text-align: center;
    }
    h1 {
      color: yellow;
      font-size: 3em;
      margin-bottom: 0.2em;
    }
    .version {
      color: white;
      font-size: 1.2em;
      margin-bottom: 1em;
    }
    .button {
      padding: 1em 2em;
      font-size: 1.2em;
      border: none;
      border-radius: 6px;
      margin: 1em;
      cursor: not-allowed;
      background-color: grey;
      color: white;
      transition: background-color 0.3s ease;
    }
    .button.active {
      background-color: cyan;
      cursor: pointer;
    }
    .button.mobile-blocked {
      background-color: red;
    }
    .mobile-warning {
      color: red;
      font-weight: bold;
      margin-top: 0.5em;
    }
    .changelog {
      border: 1px solid white;
      padding: 1em;
      margin-top: 2em;
      max-width: 500px;
    }
    .checkbox-area {
      margin-top: 2em;
      color: white;
    }
    .skip-notice {
      position: absolute;
      top: 1em;
      left: 1em;
      color: yellow;
      font-size: 1.2em;
    }
    .eval-area {
      margin-top: 3em;
    }
    .eval-area button {
      background: lime;
      color: black;
      font-weight: bold;
      padding: 0.5em 1em;
      border: none;
      cursor: pointer;
      border-radius: 4px;
    }
  </style>
</head>
<body>

<div id="skipNotice" class="skip-notice" style="display: none;">
  Download essential files and load source new html
</div>

<div id="greeting">
  <h1>Welcome User!!</h1>
  <div class="version" id="versionText">Loading version...</div>
  <button id="startButton" class="button">Loading...</button>
  <div id="mobileWarning" class="mobile-warning" style="display: none;">
    /!\ Mobile devices are not supported, we are not responsible for any errors /!\
  </div>
  <div class="changelog" id="changelogBox">
    Loading changelog...
  </div>
  <div class="checkbox-area">
    <label>
      <input type="checkbox" id="dontShow"> Don't show this page again
    </label>
  </div>

  <div class="eval-area">
    <h2>Eval Test Area</h2>
    <button onclick="runTryeval64()">Run Predefined Code</button>
  </div>
</div>

<script>
  const VERSION_URL = 'https://hsmineword.github.io/api/html/greetings.json?jam=' + Math.random();
  const skipNotice = document.getElementById('skipNotice');
  const greeting = document.getElementById('greeting');

  const storedSkip = localStorage.getItem('skipUntil');
  if (storedSkip && parseInt(storedSkip) > Date.now()) {
    greeting.style.display = 'none';
    skipNotice.style.display = 'block';
    fetchSourceAndReplace();
  } else {
    fetchGreetingData();
  }

  function fetchGreetingData() {
    fetch(VERSION_URL)
      .then(res => res.json())
      .then(data => {
        document.getElementById('versionText').textContent = 'Current version of map ' + data.version;
        document.getElementById('changelogBox').textContent = data.changelog;

        const btn = document.getElementById('startButton');
        const isMobile = /Mobi|Android/i.test(navigator.userAgent);
        const blocked = isMobile && !data.mobile_support;

        if (blocked) {
          document.getElementById('mobileWarning').style.display = 'block';
        }

        btn.classList.add('active');
        btn.textContent = 'View Map';
        btn.disabled = false;
        btn.style.cursor = 'pointer';
        btn.addEventListener('click', () => {
          fetchSourceAndReplace(data.source, data.version);
        });

        document.getElementById('dontShow').addEventListener('change', e => {
          if (e.target.checked) {
            const twoWeeks = Date.now() + 14 * 24 * 60 * 60 * 1000;
            localStorage.setItem('skipUntil', twoWeeks.toString());
          } else {
            localStorage.removeItem('skipUntil');
          }
        });
      })
      .catch(err => {
        console.error("Failed to fetch greeting data:", err);
      });
  }

  function fetchSourceAndReplace(srcURL = '', version = '') {
    const fullURL = srcURL + '?version=' + encodeURIComponent(version) + '&jam=' + Math.random();
    fetch(fullURL)
      .then(res => res.text())
      .then(html => {
        console.log("Loaded script content:\n", html);
        document.open();
        document.write(html);
        document.close();
      })
      .catch(err => {
        alert('Failed to load map source: ' + err);
      });
  }

  // Base64-encoded script (you can replace the content here)
  const tryeval64 = "Y29uc29sZS5sb2coIkhlbGxvIGZyb20gYmFzZTY0ISIpOwpkb2N1bWVudC5ib2R5LmlubmVySFRNTCA9ICc8aDInPkR5bmFtaWNhbGx5IGdlbmVyYXRlZCBjb250ZW50PC9oMj4nOw==";

  function runTryeval64() {
    try {
      const decoded = atob(tryeval64);
      console.log("Decoded Script:\n", decoded);
      const result = eval(decoded);
      console.log("Eval Result:", result);
      alert("Eval executed. Check console for output.");
    } catch (e) {
      console.error("Eval error:", e);
      alert("Error during eval: " + e.message);
    }
  }
</script>

</body>
</html>
